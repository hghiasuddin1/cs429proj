Crawler:
scrapy crawl my_crawler -a seed_url="https://en.wikipedia.org/wiki/Mike_Tyson" -a max_pages=100 -a max_depth=3

scrapy crawl my_crawler -a seed_url="http://quotes.toscrape.com" -a max_pages=100 -a max_depth=40

scrapy crawl my_crawler -a seed_url="https://moss.cs.iit.edu/" -a max_pages=60 -a max_depth=60


Indexer:
# Initialize the indexer
indexer = Indexer()

# Add some documents to the indexer
indexer.add_document(1, "This is the first document")
indexer.add_document(2, "This document is the second document")
indexer.add_document(3, "And this is the third one")
indexer.add_document(4, "Is this the first document?")

# Build the index
indexer.build_index()

# Perform searches
queries = ["document", "second document", "third", "this"]
for query in queries:
    results = indexer.search(query)
    print(f"Search results for query '{query}':")
    for doc_id, cosine_sim, tfidf_score in results:
        print(f"Document ID: {doc_id+1}, Cosine Similarity: {cosine_sim:.4f}, TF-IDF Score: {tfidf_score:.4f}")

# Print TF-IDF matrix
print("\nTF-IDF Matrix:")
print(indexer.tfidf_matrix.toarray())



output:
Search results for query 'document':
Document ID: 2, Cosine Similarity: 0.6876, TF-IDF Score: 1.0000
Document ID: 1, Cosine Similarity: 0.4698, TF-IDF Score: 0.0000
Document ID: 4, Cosine Similarity: 0.4698, TF-IDF Score: 0.0000
Document ID: 3, Cosine Similarity: 0.0000, TF-IDF Score: 0.0000
Search results for query 'second document':
Document ID: 2, Cosine Similarity: 0.8240, TF-IDF Score: 0.5380
Document ID: 1, Cosine Similarity: 0.2528, TF-IDF Score: 0.0000
Document ID: 4, Cosine Similarity: 0.2528, TF-IDF Score: 0.0000
Document ID: 3, Cosine Similarity: 0.0000, TF-IDF Score: 0.0000
Search results for query 'third':
Document ID: 3, Cosine Similarity: 0.5118, TF-IDF Score: 0.0000
Document ID: 1, Cosine Similarity: 0.0000, TF-IDF Score: 0.0000
Document ID: 2, Cosine Similarity: 0.0000, TF-IDF Score: 0.0000
Document ID: 4, Cosine Similarity: 0.0000, TF-IDF Score: 0.0000
Search results for query 'this':
Document ID: 1, Cosine Similarity: 0.3841, TF-IDF Score: 0.0000
Document ID: 4, Cosine Similarity: 0.3841, TF-IDF Score: 0.0000
Document ID: 2, Cosine Similarity: 0.2811, TF-IDF Score: 0.0000
Document ID: 3, Cosine Similarity: 0.2671, TF-IDF Score: 0.0000

TF-IDF Matrix:
[[0.         0.46979139 0.58028582 0.38408524 0.         0.
  0.38408524 0.         0.38408524]
 [0.         0.6876236  0.         0.28108867 0.         0.53864762
  0.28108867 0.         0.28108867]
 [0.51184851 0.         0.         0.26710379 0.51184851 0.
  0.26710379 0.51184851 0.26710379]
 [0.         0.46979139 0.58028582 0.38408524 0.         0.
  0.38408524 0.         0.38408524]]

Processor:
import unittest
import json
from processor import app

class TestProcessor(unittest.TestCase):

    def setUp(self):
        app.testing = True
        self.app = app.test_client()

    def test_add_documents(self):
        # Test adding documents
        documents = [
            "This is the first document",
            "This document is the second document",
            "And this is the third one",
            "Is this the first document?"
        ]
        response = self.app.post('/add_documents', json={'documents': documents})
        self.assertEqual(response.status_code, 200)
        data = json.loads(response.data)
        self.assertEqual(data['message'], 'Documents added successfully')
        print("\nAdd Documents Test:")
        print("Status Code:", response.status_code)
        print("Response Data:", data)

    def test_process_query(self):
        # Add documents
        documents = [
            "This is the first document",
            "This document is the second document",
            "And this is the third one",
            "Is this the first document?",
        ]
        self.app.post('/add_documents', json={'documents': documents})

        # Test processing queries
        queries = ["document", "second document", "third", "this"]
        for query in queries:
            response = self.app.post('/query', json={'query': query})
            self.assertEqual(response.status_code, 200)
            data = json.loads(response.data)
            print("\nProcess Query Test:")
            print("Query:", query)
            print("Status Code:", response.status_code)
            print("Response Data:", data)

    def test_empty_query(self):
        # Test query with empty query
        response = self.app.post('/query', json={'query': ' '})
        self.assertEqual(response.status_code, 400)
        data = json.loads(response.data)
        print("\nEmpty Query Test:")
        print("Status Code:", response.status_code)
        print("Response Data:", data)

    def test_missing_query_key(self):
    # Test query with missing 'query' key
        response = self.app.post('/query', json={})
        self.assertEqual(response.status_code, 400)
        data = json.loads(response.data)
        self.assertEqual(data['error'], 'Query key is missing in JSON data')
        print("\nMissing Query Key Test:")
        print("Status Code:", response.status_code)
        print("Response Data:", data)

if __name__ == '__main__':
    unittest.main()



output:
Add Documents Test:
Status Code: 200
Response Data: {'message': 'Documents added successfully'}
.
Empty Query Test:
Status Code: 400
Response Data: {'error': 'Query is empty or contains only whitespace'}
.
Missing Query Key Test:
Status Code: 400
Response Data: {'error': 'Query key is missing in JSON data'}
.
Process Query Test:
Query: document
Status Code: 200
Response Data: {'results': [{'document_index': 1, 'similarity_score': 0.6876235979836938}, {'document_index': 3, 'similarity_score': 0.4697913855799205}, {'document_index': 0, 'similarity_score': 0.4697913855799205}, {'document_index': 2, 'similarity_score': 0.0}]}

Process Query Test:
Query: second document
Status Code: 200
Response Data: {'results': [{'document_index': 1, 'similarity_score': 0.8240016875671837}, {'document_index': 3, 'similarity_score': 0.25276137487720246}, {'document_index': 0, 'similarity_score': 0.25276137487720246}, {'document_index': 2, 'similarity_score': 0.0}]}

Process Query Test:
Query: third
Status Code: 200
Response Data: {'results': [{'document_index': 2, 'similarity_score': 0.511848512707169}, {'document_index': 3, 'similarity_score': 0.0}, {'document_index': 1, 'similarity_score': 0.0}, {'document_index': 0, 'similarity_score': 0.0}]}

Process Query Test:
Query: this
Status Code: 200
Response Data: {'results': [{'document_index': 3, 'similarity_score': 0.3840852409148149}, {'document_index': 0, 'similarity_score': 0.3840852409148149}, {'document_index': 1, 'similarity_score': 0.281088674033753}, {'document_index': 2, 'similarity_score': 0.267103787642168}]}
.
